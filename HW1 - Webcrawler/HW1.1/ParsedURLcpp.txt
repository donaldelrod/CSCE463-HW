/**
Donald Elrod
824006067
CSCE 463 - Spring 2019
ParsedURL.cpp
*/
#include "pch.h"
#include "ParsedURL.h"


ParsedURL::ParsedURL()
{
}

ParsedURL::ParsedURL(string url, bool verbose) {
	original = url;
	int fragPos, queryPos, pathPos, portPos;

	if (strcmp(url.substr(0, 7).c_str(), "http://") == 0) {
		url = url.substr(7);
		protocol = "http";
	} else if (strcmp(url.substr(0, 8).c_str(), "https://") == 0) {
		url = url.substr(8);
		protocol = "https";
	} else protocol = "http"; //default if protocol is somehow omitted

	if (verbose) cout << "passed url: " << url.c_str() << endl;

	if ( (fragPos = url.find("#") ) > 0) {
		fragment = url.substr(fragPos + 1);
		url = url.substr(0, fragPos);
		if (verbose) cout << "url after truncation: " << url.c_str() << "\t" << "fragment grabbed: " << fragment.c_str() << endl;
	} else
		fragment = "";

	if ( (queryPos = url.find("?")) > 0) {
		query = url.substr(queryPos + 1);
		url = url.substr(0, queryPos);
		if (verbose) cout << "url after truncation: " << url.c_str() << "\t" << "query grabbed: " << query.c_str() << endl;
	} else
		query = "";

	if ( (pathPos = url.find("/")) > 0) {
		path = url.substr(pathPos);
		url = url.substr(0, pathPos);
		if (verbose) cout << "url after truncation: " << url.c_str() << "\t" << "path grabbed: " << path.c_str() << endl;
	} else {
		path = "/";
		if (verbose) cout << "url not truncated as no path found: " << url.c_str() << "\t" << "path grabbed: " << path.c_str() << endl;
	}

	if ( (portPos = url.find(":")) > 0) {
		string portStr = url.substr(portPos + 1);
		url = url.substr(0, portPos);

		port = atoi(portStr.c_str());
		if (port <= 0) {
			invalidReason = "failed with invalid port";
			validHost = false;
			return;
		}

		if (verbose) cout << "url after truncation: " << url.c_str() << "\t" << "port grabbed: " << portStr.c_str() << endl;
	} else {
		port = 80;
		if (verbose) cout << "port is defaulting to port 80 as none was specified" << endl;
	}
	validHost = true;
	host = url;
}

string ParsedURL::generateRequest(string requestType) {
	ostringstream oss;
	oss << requestType << " " << path;
	if (strcmp(query.c_str(), "") != 0)
		oss << "?" << query.c_str();
	if (strcmp(fragment.c_str(), "") != 0)
		oss << "#" << fragment.c_str();
	oss << " HTTP/1.0\r\n";
	oss << "User-agent: TAMUCrawler/1.1\r\n";
	oss << "Host: " << host << "\r\n";
	oss << "Connection: close\r\n\r\n";
	return oss.str();
}

char * ParsedURL::getBaseUrl()
{
	ostringstream oss;
	oss << protocol << "://" << host;
	string formatted = oss.str();
	char* baseUrl = new char[formatted.length() + 1];
	strcpy_s(baseUrl, (int)strlen(formatted.c_str())+1, formatted.c_str());
	return baseUrl;
}


ParsedURL::~ParsedURL() {}

ostream & operator<<(ostream &out, ParsedURL &url)
{
	out << url.protocol.c_str() << "://" << url.host.c_str() << ":" << url.port << url.path.c_str();
	if (strcmp(url.query.c_str(), "") != 0)
		out << "?" << url.query.c_str();
	if (strcmp(url.fragment.c_str(), "") != 0)
		out << "#" << url.fragment.c_str();

	return out;
}
